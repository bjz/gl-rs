use crate::registry::Registry;
use std::io;

#[allow(missing_copy_implementations)]
pub struct StaticGenerator;

impl super::Generator for StaticGenerator {
  fn write<W>(&self, registry: &Registry, dest: &mut W) -> io::Result<()>
  where
    W: io::Write,
  {
    write_header(dest)?;
    write_type_aliases(registry, dest)?;
    write_enums(registry, dest)?;
    write_fns(registry, dest)?;
    Ok(())
  }
}

/// Creates a `__gl_imports` module which contains all the external symbols that
/// we need for the  bindings.
fn write_header<W>(dest: &mut W) -> io::Result<()>
where
  W: io::Write,
{
  writeln!(
    dest,
    r#"
        mod __gl_imports {{
            pub use std::mem;
            pub use std::os::raw;
        }}
    "#
  )
}

/// Creates a `types` module which contains all the type aliases.
///
/// See also `generators::gen_types`.
fn write_type_aliases<W>(registry: &Registry, dest: &mut W) -> io::Result<()>
where
  W: io::Write,
{
  writeln!(
    dest,
    r#"
        pub mod types {{
            #![allow(non_camel_case_types, non_snake_case, dead_code, missing_copy_implementations)]
    "#
  )?;

  super::gen_types(registry.api, dest)?;

  writeln!(
    dest,
    "
        }}
    "
  )
}

/// Creates all the `<enum>` elements at the root of the bindings.
fn write_enums<W>(registry: &Registry, dest: &mut W) -> io::Result<()>
where
  W: io::Write,
{
  for enm in &registry.enums {
    super::gen_enum_item(enm, "types::", dest)?;
  }

  Ok(())
}

/// io::Writes all functions corresponding to the GL bindings.
///
/// These are foreign functions, they don't have any content.
fn write_fns<W>(registry: &Registry, dest: &mut W) -> io::Result<()>
where
  W: io::Write,
{
  writeln!(
    dest,
    "
        #[allow(non_snake_case, unused_variables, dead_code)]
        extern \"system\" {{"
  )?;

  for cmd in &registry.cmds {
    writeln!(
      dest,
      "#[link_name=\"{symbol}\"]
            pub fn {name}({params}) -> {return_suffix};",
      symbol = super::gen_symbol_name(registry.api, &cmd.proto.ident),
      name = cmd.proto.ident,
      params = super::gen_parameters(cmd, true, true).join(", "),
      return_suffix = cmd.proto.ty,
    )?;
  }

  writeln!(dest, "}}")
}
